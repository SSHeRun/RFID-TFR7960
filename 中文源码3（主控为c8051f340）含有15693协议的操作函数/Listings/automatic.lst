C51 COMPILER V9.56.0.0   AUTOMATIC                                                         11/17/2018 14:25:53 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE AUTOMATIC
OBJECT MODULE PLACED IN .\Objects\automatic.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE automatic.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\automatic.lst) TABS(2) OBJECT(.\Objects\automatic.obj)

line level    source

   1          /*********************************************************************************************************
             -*********
   2          * ÎÄ ¼þ Ãû£ºAUTOMATIC.C
   3          * ¹¦    ÄÜ£ºÕì²âÔÄ¶ÁÆ÷ÔÄ¶Á·¶Î§ÄÚµÄËùÓÐ¾í±ê¿¨Æ¬¡£
   4          *
   5          * ×÷    Õß£ºEMDOOR
   6          * ÈÕ    ÆÚ£º2011-9-29
   7          **********************************************************************************************************
             -**********/
   8          #include <automatic.h>
   9          
  10          unsigned char Set_pro[9]={0x0C,0x00,0x03,0x04,0x10,0x00,0x21,0x01,0x00};                    //??????
  11          unsigned char Write_Sig[12]={0x0F,0x00,0x03,0x04,0x18,0x40,0x21,0x01,0x78,0x56,0x34,0x12};  //????0x01 ??1
             -2345678
  12          unsigned char Read_Sig[8]={0x0B,0x00,0x03,0x04,0x18,0x00,0x20,0x01};                        //????0x01
  13          unsigned char Write_AFI[8]={0x0B,0x00,0x03,0x04,0x18,0x40,0x27,0x01};                       //?AFI??01
  14          unsigned char Write_DSFID[8]={0x0B,0x00,0x03,0x04,0x18,0x40,0x29,0xEE};                     //?DSFID??EE
  15          unsigned char Get_info[7]={0x0A,0x00,0x03,0x04,0x18,0x00,0x2B};                             //????????
  16          unsigned char Get_sec[9]={0x0C,0x00,0x03,0x04,0x18,0x00,0x2C,0x01,0x02};                    //?????????0x0
             -1,???02(???3??)
  17          
  18          
  19          /*********************************************************************************************************
             -*********
  20          * ????:RFID_Test()
  21          * ?    ?:RFID?????????
  22          * ????:?
  23          * ????:?
  24          * ?    ?:????????????????AFI??DSFID?????????????    
  25          **********************************************************************************************************
             -*********/
  26          void RFID_test(void)
  27          {
  28   1          unsigned char i, count;
  29   1          unsigned char j, temp2;
  30   1          
  31   1      //    if(Found_tag)
  32   1      //    {
  33   1              for(i = 0; i < 9; i++)                      //??TRF7961????
  34   1              {
  35   2                  buf[i]=Set_pro[i];
  36   2              }
  37   1             
  38   1              count = buf[0] - 8;
  39   1              WriteSingle(&buf[5], count);
  40   1          
  41   1      //        for(test_no=0;test_no<6;test_no++)
  42   1      //        {   
  43   1      //            delay_ms(800);
  44   1      //           
  45   1      //            switch(test_no)
  46   1      //            {
  47   1      //                case 0:
  48   1      //                for(i = 0; i < 12; i++)             //???????0x01 12345678
C51 COMPILER V9.56.0.0   AUTOMATIC                                                         11/17/2018 14:25:53 PAGE 2   

  49   1      //                {
  50   1      //                    buf[ i ] = Write_Sig[ i ];
  51   1      //                }
  52   1      //                Display_Chinese(0, 0, (unsigned char *)xie);                    //??“????”??
  53   1      //                Display_Chinese(0, 1, (unsigned char *)yi);
  54   1      //                Display_Chinese(0, 2, (unsigned char *)ge);
  55   1      //                Display_Chinese(0, 3, (unsigned char *)kuai);
  56   1      //                Display_Char(2, 0, (unsigned char *)Num+(buf[7]  >> 4)*0x10);   //????
  57   1      //                Display_Char(2, 1, (unsigned char *)Num+(buf[7]  & 0x0f)*0x10);
  58   1      
  59   1      //                for(j = 8, temp2 = 15; j < 12; j++,temp2 -= 2)                  //????
  60   1      //                {
  61   1      //                    Display_Char(2, temp2 - 1, (unsigned char *)(Num + (buf[j] >> 4) * 0x10));
  62   1      //                    Display_Char(2, temp2,(unsigned char *)(Num+(buf[j] & 0x0F) * 0x10));
  63   1      //                }
  64   1      //                break;
  65   1      //                case 1:
  66   1      //                for(i = 0; i < 9; i++)              //???????0x01
  67   1      //                {
  68   1      //                    buf[ i ] = Read_Sig[ i ];
  69   1      //                }
  70   1      //                Display_Chinese(0, 0, (unsigned char *)du);                     //??“????”
  71   1      //                Display_Chinese(0, 1, (unsigned char *)yi);
  72   1      //                Display_Chinese(0, 2, (unsigned char *)ge);
  73   1      //                Display_Chinese(0, 3, (unsigned char *)kuai);
  74   1      //                Display_Char(2, 0, (unsigned char *)Num+(buf[7]  >> 4)*0x10);   //????
  75   1      //                Display_Char(2, 1, (unsigned char *)Num+(buf[7]  & 0x0f)*0x10);
  76   1      //                break;
  77   1      //                case 2:
  78   1      //                for(i = 0; i < 8; i++)              //?AFI???
  79   1      //                {
  80   1      //                    buf[ i ] = Write_AFI[ i ];
  81   1      //                }
  82   1      //                Display_Chinese(0, 0, (unsigned char *)xie);                    //??“?AFI”??
  83   1      //                Display_Char(0, 2, (unsigned char *)Num+0x0A*0x10);
  84   1      //                Display_Char(0, 3, (unsigned char *)Num+0x0F*0x10);
  85   1      //                Display_Char(0, 4, (unsigned char *)CI);
  86   1      //                Display_Char(2, 13, (unsigned char *)Num+(buf[7]  >> 4)*0x10);  //???????
  87   1      //                Display_Char(2, 14, (unsigned char *)Num+(buf[7]  & 0x0f)*0x10);
  88   1      //                break;
  89   1      //                case 3:
  90   1      //                for(i = 0; i < 8; i++)              //?DSFID??????
  91   1      //                {
  92   1      //                    buf[i]=Write_DSFID[i];
  93   1      //                }
  94   1      //                Display_Chinese(0, 0, (unsigned char *)xie);                    //??“?DSFID”??
  95   1      //                Display_Char(0, 2, (unsigned char *)Num+0x0D*0x10);
  96   1      //                Display_Char(0, 3, (unsigned char *)CS);
  97   1      //                Display_Char(0, 4, (unsigned char *)Num+0x0F*0x10);
  98   1      //                Display_Char(0, 5, (unsigned char *)CI);
  99   1      //                Display_Char(0, 6, (unsigned char *)Num+0x0D*0x10);
 100   1      //                Display_Char(2, 13, (unsigned char *)Num+(buf[7]  >> 4)*0x10);  //????
 101   1      //                Display_Char(2, 14, (unsigned char *)Num+(buf[7]  & 0x0f)*0x10);
 102   1      //                break;
 103   1      //                case 4:
 104   1                      for(i = 0; i < 7; i++)              //????????
 105   1                      {
 106   2                          buf[ i ] = Get_info[ i ];
 107   2                      }
 108   1      //                Display_Chinese(0, 0, (unsigned char *)xi);                     //??“????”
 109   1      //                Display_Chinese(0, 1, (unsigned char *)tong);
 110   1      //                Display_Chinese(0, 2, (unsigned char *)xin);
C51 COMPILER V9.56.0.0   AUTOMATIC                                                         11/17/2018 14:25:53 PAGE 3   

 111   1      //                Display_Chinese(0, 3, (unsigned char *)xi2);
 112   1      //                break;
 113   1      //                case 5:
 114   1      //                for(i = 0; i < 9; i++)              //???????   
 115   1      //                {
 116   1      //                    buf[ i ] = Get_sec[ i ];
 117   1      //                }
 118   1      //                Display_Chinese(0, 0, (unsigned char *)an);                     //??“????”
 119   1      //                Display_Chinese(0, 1, (unsigned char *)quan);
 120   1      //                Display_Chinese(0, 2, (unsigned char *)zhuang);
 121   1      //                Display_Chinese(0, 3, (unsigned char *)tai);
 122   1      //                Display_Char(2, 0, (unsigned char *)CS);                        //??“S”???????
 123   1      //                Display_Char(2, 1, (unsigned char *)Num+(buf[7]  >> 4)*0x10);   //????
 124   1      //                Display_Char(2, 2, (unsigned char *)Num+(buf[7]  & 0x0f)*0x10);
 125   1      //                Display_Char(2, 4, (unsigned char *)CN);                        //??“N”?????
 126   1      //                Display_Char(2, 5, (unsigned char *)Num+(buf[8]  >> 4)*0x10);   //???
 127   1      //                Display_Char(2, 6, (unsigned char *)Num+(buf[8]  & 0x0f)*0x10);
 128   1      //                break;
 129   1      //                default:break;
 130   1      //            }
 131   1      //            Display_pro();                          //?????...
 132   1                  
 133   1                  count = buf[0] - 8;
 134   1                  RequestCommand(&buf[0], count, 0x00, 0);//??????  
 135   1      //        }
 136   1              delay_ms(800);
 137   1      //    }
 138   1      }
*** WARNING C280 IN LINE 29 OF automatic.c: 'j': unreferenced local variable
*** WARNING C280 IN LINE 29 OF automatic.c: 'temp2': unreferenced local variable
 139          /*********************************************************************************************************
             -*********
 140          * º¯ÊýÃû³Æ£ºFindTags()
 141          * ¹¦    ÄÜ£º¸ù¾ÝÖ¸¶¨¾í±êÐ­ÒéÀàÐÍ£¬ÉèÖÃTRF7960ÅäÖÃ¸÷Ïà¹Ø¼Ä´æÆ÷ºó£¬½øÐÐÑ°¿¨²Ù×÷¡£
 142          * Èë¿Ú²ÎÊý£ºprotocol       Ö¸¶¨Ð­ÒéÀàÐÍ
 143          * ³ö¿Ú²ÎÊý£ºÎÞ
 144          * Ëµ    Ã÷£º¸Ãº¯ÊýÊÇÒ»¸öËÀÑ­»·º¯Êý£¬ËùÓÐµÄÍÑ»úÑÝÊ¾Ö´ÐÐ¹ý³Ì¾ùÔÚ´ËÍê³É¡£
 145          **********************************************************************************************************
             -*********/
 146          void FindTags(void)
 147          {
 148   1          unsigned char command[10];                      //¶¨ÒåÃüÁîÊý¾ÝÔÝ´æ»º³åÆ÷Êý×é
 149   1      
 150   1          while(1)
 151   1          {
 152   2                  command[0] = ChipStateControl;          // ¿ªÆôRFÊ¹ÄÜ£¬Ñ¡Ôñ5V²Ù×÷Ä£Ê½
 153   2                  command[1] = 0x21;
 154   2                  command[2] = ISOControl;                // ÉèÖÃÑ¡ÔñISO15693²Ù×÷Ä£Ê½Îª:¸ß±ÈÌØÂÊ26.48kbps µ¥·ùÔØ
             -²¨ 1/4(Ä¬ÈÏÄ£Ê½)
 155   2                  command[3] = 0x02;
 156   2                  WriteSingle(command, 4);                // Ð´4¸ö×Ö½ÚÃüÁîµ½TRF7960¼Ä´æÆ÷ÖÐ
 157   2      
 158   2                  delay_ms(5);
 159   2                  flags = 0x06;                           // 16(slot)²ÛÄ£Ê½
 160   2                  //flags = 0x26;
 161   2      
 162   2                  command[0] = 0x04;
 163   2      
 164   2                  InventoryRequest(command, 0);           // ·¢ËÍ×ÜÁ¿ÇëÇóÃüÁî(¼´Ñ°¿¨ÃüÁî)
 165   2      
 166   2                  command[0] = ChipStateControl;          // ¹Ø±ÕRF²¿·ÖµçÂ·
 167   2                  command[1] = 0x01;
C51 COMPILER V9.56.0.0   AUTOMATIC                                                         11/17/2018 14:25:53 PAGE 4   

 168   2                  WriteSingle(command, 2);
 169   2                  delay_ms(1);
 170   2      
 171   2                  command[0] = IRQStatus;                 // ¸ø¼Ä´æÆ÷¸³Öµ
 172   2                  command[1] = IRQMask;               
 173   2      
 174   2                                            
 175   2                  ReadCont(command, 2);                //¶ÁÈ¡IRQÖÐ¶Ï×´Ì¬¼Ä´æÆ÷¼°ÖÐ¶Ï±êÖ¾
 176   2                  
 177   2                  
 178   2                  RFID_test();
 179   2          
 180   2              delay_ms(10);
 181   2          }   /* while */
 182   1      }   /* FindTags */
 183          
 184          
 185          
 186          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    232    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     61      13
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
